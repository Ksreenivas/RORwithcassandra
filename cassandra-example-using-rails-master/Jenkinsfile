#!/usr/bin/env groovy

pipeline {
 
    agent {
        node {
            label 'master' 
        }
    }
     environment {
        
        //put your own environment variables
        REGISTRY_URI = 'docker.io'
        REGISTRY_NAME = 'sreenivask'
        IMAGE_NAME = 'ror-cassandra'
        USERNAME = 'sreenivask'
        PASSWORD = 'xxxxxxxxxx'
    }
    stages {
        stage('Initial Notification') {
            steps {
                 //put webhook for your notification channel 
                 echo 'Pipeline Start Notification'
                 sh """
                 sh -x ./RORwithcassandra/utility-scripts/clone-repo.sh
                 """
            }
        }
        stage('Docker Lint') {           
            steps {
               //put your code scanner 
                echo 'Docker lint'
                sh """
                docker run --rm -i hadolint/hadolint < ./Dockerfile  
                echo $?
                """
            }
        }
 
        stage('Docker Test') {
            steps {
                //put your Testing
                echo 'Execute Test script sh file'
            }
            post{
                success{
                    echo "Post the status to Developer"
                }
                failure{
                    echo "Post status to Developer and stop"
                }
            }
        }
        stage("Build"){
            steps {
                steps {
                    withCredentials([usernamePassword(credentialsId: 'YOUR_ID_DEFINED', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                        sh """
                        docker login ${REGISTRY_URI} -u ${USERNAME} -p ${PASSWORD}
                        """
                    }
                echo "Docker Build"

                sh """
                docker build -t ${IMAGE_NAME}:${VERSION_PREFIX}${BUILD_NUMBER} ${WORKSPACE} -f Dockerfile
                """

                echo "Docker Tag"

                sh """
                docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${GIT_COMMIT}
                docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${BUILD_NUMBER}
                docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${LATEST}
                """
                                
                echo "Docker Push"

                sh """
                docker push ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${GIT_COMMIT}
                docker push ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${BUILD_NUMBER}
                docker push ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${LATEST}
                """

            }
            post{
                success{
                    echo "Build and Push Successfully"
                }
                failure{
                    echo "Build and Push Failed"
                }
            }
        }
        stage('Quality Gates') {
            steps {
                //Health Check
                echo 'Health Check: Shell script to run health check'

                //Logging Gate
                echo 'Shell script to check logging is done properly or not'

                //Instrumentation Gate
                echo 'Shell script to check if all the norms are followed or not'

                //Documentation Gate
                echo 'Script to check Readme.md and documentation have been created'

                //Security Gate
                echo 'Scan the images for security vulnerabilities'                

            }
            post{
                success{
                    echo "Quality Gate Successfully"
                }
                failure{
                    echo "Quality Gate Failed"
                }
            }
        }
        
        stage("Deploy to Staging"){
                    when {
                        branch 'staging'
                    }
                    steps {
                        kubernetesDeploy kubeconfigId: 'kubeconfig-credentials-id', configs: 'YOUR_YAML_PATH/your_k8s_yaml', enableConfigSubstitution: true  // REPLACE kubeconfigId

                        echo "DEPLOY CASSANDRA CLUSTER TO K8S"
                        sh """
                        helm lint .
                        helm install RORwithcassandra/charts/cassandra .
                        """

                        echo "DEPLOY RAILS APPLICATION TO CLUSTER"
                        sh """
                        helm lint .
                        helm install RORwithcassandra/charts/rails-app .
                        """
                    }
                    post{
                        success{
                            echo "Successfully deployed to Staging"
                        }
                        failure{
                            echo "Failed deploying to Staging"
                        }
                    }
                }
        }
         stage("Deploy to Production"){
            when {
                branch 'master'
            }
            steps { 
                kubernetesDeploy kubeconfigId: 'kubeconfig-credentials-id', configs: 'YOUR_YAML_PATH/your_k8s_yaml', enableConfigSubstitution: true  // REPLACE kubeconfigId

                        echo "DEPLOY CASSANDRA CLUSTER TO K8S"
                        sh """
                        helm lint .
                        helm install RORwithcassandra/charts/cassandra .
                        """

                        echo "DEPLOY RAILS APPLICATION TO CLUSTER"
                        sh """
                        helm lint .
                        helm install RORwithcassandra/charts/rails-app .
                        """
            }
            post{
                success{
                    echo "Successfully deployed to Production"
                }
                failure{
                    echo "Failed deploying to Production"
                }
            }
        }

    post{
        always{
                step([
                    //put your Testing
                ])
        }
        success{
            //notification webhook
            echo 'Pipeline Execution Successfully Notification'
        }
        failure{
            //notification webhook
            echo 'Pipeline Execution Failed Notification'
        }
    }
}